/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  SporkStaker,
  SporkStakerInterface,
} from "../../contracts/SporkStaker";

const _abi = [
  {
    inputs: [],
    name: "INVALID_AMOUNT",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Unstaked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sporkToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_stakedSporkToken",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sporkToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakedSporkToken",
    outputs: [
      {
        internalType: "contract IERC20MintableBurnable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610cb2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806312d4b0a51461005c5780632e17de781461007a5780634744a17814610096578063485cc955146100b4578063a694fc3a146100d0575b600080fd5b6100646100ec565b604051610071919061083d565b60405180910390f35b610094600480360381019061008f9190610893565b610112565b005b61009e6102dd565b6040516100ab91906108e1565b60405180910390f35b6100ce60048036038101906100c9919061093a565b610303565b005b6100ea60048036038101906100e59190610893565b6104c5565b005b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61011a610692565b60008103610154576040517ffae8279100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166379cc679033836040518363ffffffff1660e01b81526004016101b1929190610998565b600060405180830381600087803b1580156101cb57600080fd5b505af11580156101df573d6000803e3d6000fd5b50505050603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610240929190610998565b6020604051808303816000875af115801561025f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028391906109f9565b503373ffffffffffffffffffffffffffffffffffffffff167f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75826040516102ca9190610a26565b60405180910390a26102da6106e1565b50565b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060019054906101000a900460ff161590508080156103345750600160008054906101000a900460ff1660ff16105b806103615750610343306106ea565b1580156103605750600160008054906101000a900460ff1660ff16145b5b6103a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039790610ac4565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156103dd576001600060016101000a81548160ff0219169083151502179055505b6103e561070d565b82603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081603460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156104c05760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516104b79190610b2c565b60405180910390a15b505050565b6104cd610692565b60008103610507576040517ffae8279100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161056693929190610b47565b6020604051808303816000875af1158015610585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a991906109f9565b50603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610607929190610998565b600060405180830381600087803b15801561062157600080fd5b505af1158015610635573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d8260405161067f9190610a26565b60405180910390a261068f6106e1565b50565b6002600154036106d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ce90610bca565b60405180910390fd5b6002600181905550565b60018081905550565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff1661075c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075390610c5c565b60405180910390fd5b610764610766565b565b600060019054906101000a900460ff166107b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ac90610c5c565b60405180910390fd5b60018081905550565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006108036107fe6107f9846107be565b6107de565b6107be565b9050919050565b6000610815826107e8565b9050919050565b60006108278261080a565b9050919050565b6108378161081c565b82525050565b6000602082019050610852600083018461082e565b92915050565b600080fd5b6000819050919050565b6108708161085d565b811461087b57600080fd5b50565b60008135905061088d81610867565b92915050565b6000602082840312156108a9576108a8610858565b5b60006108b78482850161087e565b91505092915050565b60006108cb8261080a565b9050919050565b6108db816108c0565b82525050565b60006020820190506108f660008301846108d2565b92915050565b6000610907826107be565b9050919050565b610917816108fc565b811461092257600080fd5b50565b6000813590506109348161090e565b92915050565b6000806040838503121561095157610950610858565b5b600061095f85828601610925565b925050602061097085828601610925565b9150509250929050565b610983816108fc565b82525050565b6109928161085d565b82525050565b60006040820190506109ad600083018561097a565b6109ba6020830184610989565b9392505050565b60008115159050919050565b6109d6816109c1565b81146109e157600080fd5b50565b6000815190506109f3816109cd565b92915050565b600060208284031215610a0f57610a0e610858565b5b6000610a1d848285016109e4565b91505092915050565b6000602082019050610a3b6000830184610989565b92915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000610aae602e83610a41565b9150610ab982610a52565b604082019050919050565b60006020820190508181036000830152610add81610aa1565b9050919050565b6000819050919050565b600060ff82169050919050565b6000610b16610b11610b0c84610ae4565b6107de565b610aee565b9050919050565b610b2681610afb565b82525050565b6000602082019050610b416000830184610b1d565b92915050565b6000606082019050610b5c600083018661097a565b610b69602083018561097a565b610b766040830184610989565b949350505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000610bb4601f83610a41565b9150610bbf82610b7e565b602082019050919050565b60006020820190508181036000830152610be381610ba7565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000610c46602b83610a41565b9150610c5182610bea565b604082019050919050565b60006020820190508181036000830152610c7581610c39565b905091905056fea264697066735822122068d10d453d531b2556d1c46ea28280bf53a332c5d3f5525d570dd0faf75ab05a64736f6c63430008130033";

type SporkStakerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SporkStakerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SporkStaker__factory extends ContractFactory {
  constructor(...args: SporkStakerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SporkStaker> {
    return super.deploy(overrides || {}) as Promise<SporkStaker>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SporkStaker {
    return super.attach(address) as SporkStaker;
  }
  override connect(signer: Signer): SporkStaker__factory {
    return super.connect(signer) as SporkStaker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SporkStakerInterface {
    return new utils.Interface(_abi) as SporkStakerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SporkStaker {
    return new Contract(address, _abi, signerOrProvider) as SporkStaker;
  }
}
